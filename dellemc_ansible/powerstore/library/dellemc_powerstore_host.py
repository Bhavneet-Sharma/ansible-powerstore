#!/usr/bin/python
# Copyright: (c) 2019, DellEMC

from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils import dellemc_ansible_utils as utils
import logging

__metaclass__ = type
ANSIBLE_METADATA = {'metadata_version': '1.0',
                    'status': ['preview'],
                    'supported_by': 'community'
                    }

DOCUMENTATION = r'''
---
module: dellemc_powerstore_host
version_added: '2.6'
short_description:  Manage host on PowerStore storage system
description:
- Managing host on PowerStore storage system includes create host with a
  set of initiators, add/remove initiators from host, rename host and
  delete host.
author:
- Manisha Agrawal (manisha.agrawal@dell.com)
extends_documentation_fragment:
  - dellemc.dellemc_powerstore
options:
  host_name:
    description:
    - The host name. This value must contain 128 or fewer printable Unicode
      characters.
    - Creation of empty host is not allowed.
    - Required when creating a host.
    - Use either host_id or host_name for modify and delete tasks.
  host_id:
    description:
    - The 36 character long host id automatically generated when a host is
      created.
    - use either host_id or host_name for modify and delete tasks.
    - host_id cannot be used while creating host, as it is generated by the
      array after creation of host.
    required: False
  os_type:
      description:
      - Operating system of the host.
      - Required when creating a host
      - os type cannot be modified for a given host.
      choices: [Windows, Linux, ESXi, AIX, HP-UX, Solaris]
  initiators:
      description:
      - List of Initiator WWN or IQN to be added or removed from the host.
      - Child initiators in a host can only be of one type, either FC or iSCSI.
      - Required when creating a host.
  state:
    description:
    - Define whether the host should exist or not.
    - present - indicates that the host should exist in system.
    - absent - indicates that the host should not exist in system.
    required: true
    choices: [absent, present]
  initiator_state:
    description:
    - Define whether the initiators should be present or absent in host.
    - present-in-host - indicates that the initiators should exist on host.
    - absent-in-host - indicates that the initiators should not exist on host.
    - Required when creating a host with initiators or adding/removing
      initiators to/from existing host.
    choices: [present-in-host, absent-in-host]
  new_name:
    description:
    - The new name of host for renaming function. This value must contain 128
      or fewer printable Unicode characters.
    - Cannot be specified when creating a host.
  '''


EXAMPLES = r'''
  - name: Create host
    dellemc_powerstore_host:
      array_ip: "{{array_ip}}"
      verifycert: "{{verifycert}}"
      user: "{{user}}"
      password: "{{password}}"
      host_name: "{{host_name}}"
      os_type: 'Windows'
      initiators:
        -21:00:00:24:ff:31:e9:fc
      state: 'present'
      initiator_state: 'present-in-host'

  - name: Get host details by name
    dellemc_powerstore_host:
      array_ip: "{{array_ip}}"
      verifycert: "{{verifycert}}"
      user: "{{user}}"
      password: "{{password}}"
      host_name: "{{host_name}}"
      state: 'present'

  - name: Get host details by id
    dellemc_powerstore_host:
      array_ip: "{{array_ip}}"
      verifycert: "{{verifycert}}"
      user: "{{user}}"
      password: "{{password}}"
      host_id: "{{host_id}}"
      state: 'present'

  - name: Add initiators to host
    dellemc_powerstore_host:
      array_ip: "{{array_ip}}"
      verifycert: "{{verifycert}}"
      user: "{{user}}"
      password: "{{password}}"
      host_name: "{{host_name}}"
      initiators:
        -21:00:00:24:ff:31:e9:ee
      initiator_state: 'present-in-host'
      state: 'present'

  - name: Remove initiators from host
    dellemc_powerstore_host:
      array_ip: "{{array_ip}}"
      verifycert: "{{verifycert}}"
      user: "{{user}}"
      password: "{{password}}"
      host_name: "{{host_name}}"
      initiators:
        -21:00:00:24:ff:31:e9:ee
      initiator_state: 'absent-in-host'
      state: 'present'

  - name: Rename host
    dellemc_powerstore_host:
      array_ip: "{{array_ip}}"
      verifycert: "{{verifycert}}"
      user: "{{user}}"
      password: "{{password}}"
      host_name: "{{host_name}}"
      new_name: "{{new_host_name}}"
      state: 'present'

  - name: Delete host
    dellemc_powerstore_host:
      array_ip: "{{array_ip}}"
      verifycert: "{{verifycert}}"
      user: "{{user}}"
      password: "{{password}}"
      host_name: "{{new_host_name}}"
      state: 'absent'
'''

RETURN = r'''
        host_details:
            description: ''
            host_group_id: null
            id: c17fc987-bf82-480c-af31-9307b89923d3
            initiators:
            - active_sessions:
              - appliance_id: A1
                bond_id: null
                eth_port_id: null
                fc_port_id: 87e54fbdda07453e97e7351657515780
                node_id: aa20d9fd0e684e28a690d5748edf1678
                port_name: 58:cc:f0:90:48:a0:03:44
                veth_id: null
              - appliance_id: A1
                bond_id: null
                eth_port_id: null
                fc_port_id: 6d35937d10f440f2ad6547c64571833a
                node_id: aa20d9fd0e684e28a690d5748edf1678
                port_name: 58:cc:f0:91:48:a0:03:44
                veth_id: null
              chap_mutual_username: ''
              chap_single_username: ''
              port_name: 21:00:00:24:ff:48:9f:8b
              port_type: FC
            name: host2
            os_type: Linux
            os_type_l10n: Linux
'''
LOG = utils.get_logger('dellemc_powerstore_host', log_devel=logging.INFO)

py4ps_sdk = utils.has_pyu4ps_sdk()
HAS_PY4PS = py4ps_sdk['HAS_Py4PS']
IMPORT_ERROR = py4ps_sdk['Error_message']

py4ps_version = utils.py4ps_version_check()
IS_SUPPORTED_PY4PS_VERSION = py4ps_version['supported_version']
VERSION_ERROR = py4ps_version['unsupported_version_message']

# Application type
APPLICATION_TYPE = 'Ansible/1.0'

class PowerStoreHost(object):
    '''Class with host(initiator group) operations'''

    def __init__(self):
        # Define all parameters required by this module
        self.module_params = utils.get_powerstore_management_host_parameters()
        self.module_params.update(self.get_powerstore_host_parameters())
        # Initialize the Ansible module
        self.module = AnsibleModule(
            argument_spec=self.module_params,
            supports_check_mode=True
        )
        
        LOG.info(
            'HAS_PY4PS = {0} , IMPORT_ERROR = {1}'.format(
                HAS_PY4PS, IMPORT_ERROR))
        if HAS_PY4PS is False:
            self.module.fail_json(msg=IMPORT_ERROR)
        LOG.info(
            'IS_SUPPORTED_PY4PS_VERSION = {0} , VERSION_ERROR = {1}'.format(
                IS_SUPPORTED_PY4PS_VERSION,
                VERSION_ERROR))
        if IS_SUPPORTED_PY4PS_VERSION is False:
            self.module.fail_json(msg=VERSION_ERROR)

        # result is a dictionary that contains changed status and host details
        self.result = {"changed": False, "host_details": {}}

        self.conn = utils.get_powerstore_connection(self.module.params,
                                                    application_type = APPLICATION_TYPE)
        LOG.info(
            'Got Python library connection instance for provisioning on'
            ' PowerStore {0}'.format(
                self.conn))

    def get_powerstore_host_parameters(self):
        return dict(
            host_name=dict(required=False, type='str'),
            host_id=dict(required=False, type='str'),
            initiators=dict(required=False, type='list'),
            state=dict(required=True, choices=['present', 'absent'],
                       type='str'),
            initiator_state=dict(required=False, choices=['absent-in-host',
                                                          'present-in-host'],
                                 type='str'),
            new_name=dict(required=False, type='str'),
            os_type=dict(required=False, type='str', choices=['Windows', 'Linux',
             'ESXi', 'AIX', 'HP-UX', 'Solaris'])
        )

    def get_host(self, host_id):
        '''
        Get details of a given host, given host ID
        '''
        try:
            LOG.info('Getting host {0} details'.format(host_id))
            host_from_get = self.conn.provisioning.get_host_details(host_id)
            if host_from_get:
                return host_from_get
        except Exception as e:
            error_msg = 'Unable to get details of host with ID: {0} -- error: {1}'.format(host_id, str(e))
            LOG.error(error_msg)
            self.module.fail_json(msg=error_msg)
        return None

    def get_host_id_by_name(self, host_name):
        host_info = self.conn.provisioning.get_host_by_name(host_name)
        if host_info:
            if len(host_info) > 1:
                error_msg = 'Multiple hosts by the same name found'
                LOG.error(error_msg)
                self.module.fail_json(msg=error_msg)
            return host_info[0]['id']
        return None

    def create_host(self, host_name):
        '''
        Create host with given initiators
        '''
        initiators = self.module.params['initiators']
        if initiators is None or not len(initiators):
            error_msg = ("Create host {0} failed as no initiators are"
                         " specified".format(host_name))
            LOG.error(error_msg)
            self.module.fail_json(msg=error_msg)

        os_type = self.module.params['os_type']
        if os_type is None:
            error_msg = ("Create host {0} failed as os_type is not"
                         "specified".format(host_name))
            LOG.error(error_msg)
            self.module.fail_json(msg=error_msg)

        list_of_initiators = []
        initiator_type = []

        for initiator in initiators:
            current_initiator = {}
            current_initiator['port_name'] = initiator
            if initiator.startswith('iqn'):
                current_initiator['port_type'] = 'iSCSI'
                initiator_type.append('iSCSI')
            else:
                current_initiator['port_type'] = 'FC'
                initiator_type.append('FC')
            list_of_initiators.append(current_initiator)

        if 'iSCSI' in initiator_type and 'FC' in initiator_type:
            error_msg = ('Invalid IQNs. Cannot add both IQN & WWN as part of'
                         ' host. Connect either fiber channel or iSCSI')
            LOG.error(error_msg)
            self.module.fail_json(msg=error_msg)

        try:
            msg = "Creating host {0} with initiators {1}"
            LOG.info(msg.format(host_name, list_of_initiators))
            resp = self.conn.provisioning.create_host(
                name=host_name, os_type=os_type, initiators=list_of_initiators)
            LOG.info("the response is {}".format(resp))
            return True

        except Exception as e:
            error_msg = 'Create host {0} failed with error {1}'.format(
                host_name, str(e))
            LOG.error(error_msg)
            self.module.fail_json(msg=error_msg)
        return None

    def _get_add_initiators(self, existing, requested):
        all_inits = existing + requested
        add_inits = list(set(all_inits) - set(existing))
        return add_inits

    def _get_remove_initiators(self, existing, requested):
        rem_inits = list(set(existing).intersection(set(requested)))
        return rem_inits

    def add_host_initiators(self, host, initiators):

        existing_inits = []
        if 'host_initiators' in host:
            current_initiators = host['host_initiators']
            if current_initiators:
                for initiator in current_initiators:
                    existing_inits.append(initiator['port_name'])

        if initiators \
           and (set(initiators).issubset(set(existing_inits))) :
                LOG.info('Initiators are already present in host {0}'
                         .format(host['name']))
                return False

        add_list = self._get_add_initiators(existing_inits, initiators)
        add_list_with_type = []
        for init in add_list:
            current_initiator = {}
            current_initiator['port_name'] = init
            if init.startswith('iqn'):
                current_initiator['port_type'] = 'iSCSI'
            else:
                current_initiator['port_type'] = 'FC'
            add_list_with_type.append(current_initiator)

        if len(add_list_with_type) > 0:
            try:
                LOG.info('Adding initiators {0} to host {1}'.format(
                    add_list_with_type, host['name']))
                resp = self.conn.provisioning.modify_host(
                    host['id'], add_initiators=add_list_with_type)
                LOG.info(
                    'Response from add initiator function {0}'.format(resp))
                return True
            except Exception as e:
                error_msg = (
                    ("Adding initiators {0} to host {1} failed with"
                     "error {2}").format(
                        add_list, host['name'], str(e)))
                LOG.error(error_msg)
                self.module.fail_json(msg=error_msg)
        else:
            LOG.info('No initiators to add to host {0}'.format(
                host['name']))
            return False

    def remove_host_initiators(self, host, initiators):
        existing_inits = []
        current_initiators = host['host_initiators']

        if current_initiators:
            for initiator in current_initiators:
                existing_inits.append(initiator['port_name'])

        if existing_inits is None or not len(existing_inits):
            LOG.info(
                'No initiators are present in host {0}'.format(
                    host['name']))
            return False

        remove_list = self._get_remove_initiators(existing_inits, initiators)

        if len(remove_list) > 0:
            try:
                LOG.info('Removing initiators {0} from host {1}'.format(
                    remove_list, host['name']))
                resp = self.conn.provisioning.modify_host(
                    host['id'], remove_initiators=remove_list)
                LOG.info(
                    'Response from remove initiator function {0}'.format(resp))
                return True
            except Exception as e:
                error_msg = (("Removing initiators {0} from host {1} failed"
                              "with error {2}").format(
                    remove_list, host['name'], str(e)))
                LOG.error(error_msg)
                self.module.fail_json(msg=error_msg)
        else:
            LOG.info('No initiators to remove from host {0}'.format(
                host['name']))
            return False

    def rename_host(self, host, new_name):
        try:
            self.conn.provisioning.modify_host(host['id'], name=new_name)
            return True
        except Exception as e:
            error_msg = 'Renaming of host {0} failed with error {1}'.format(
                host['name'], str(e))
            LOG.error(error_msg)
            self.module.fail_json(msg=error_msg)
            return None

    def delete_host(self, host):
        '''
        Delete host from system
        '''
        try:
            self.conn.provisioning.delete_host(host['id'])
            return True
        except Exception as e:
            error_msg = ('Delete host {0} failed with error {1}'.format(
                host['name'], str(e)))
            LOG.error(error_msg)
            self.module.fail_json(msg=error_msg)

    def _create_result_dict(self, changed):
        self.result['changed'] = changed
        if self.module.params['state'] == 'absent':
            self.result['host_details'] = {}
        else:
            if self.module.params['host_name']:
                host_id = self.get_host_id_by_name(
                    self.module.params['host_name'])
                self.result['host_details'] = self.get_host(host_id)
            if self.module.params['host_id']:
                self.result['host_details'] = self.get_host(
                    self.module.params['host_id'])

    def perform_module_operation(self):
        '''
        Perform different actions on host based on user parameter
        chosen in playbook
        '''
        state = self.module.params['state']
        initiator_state = self.module.params['initiator_state']
        host_name = self.module.params['host_name']
        host_id = self.module.params['host_id']
        initiators = self.module.params['initiators']
        new_name = self.module.params['new_name']
        os_type = self.module.params['os_type']
        LOG.debug('Module {0} has been called with args {1} '
                  .format(__file__, self.module.params))

        if host_name and host_id:
            error_msg = ("Operation on host failed as both host_id and "
                         "host_name are specified. Please specify either of "
                         "them")
            LOG.error(error_msg)
            self.module.fail_json(msg=error_msg)

        if host_name:
            host_id = self.get_host_id_by_name(host_name)
        if host_id:
            host = self.get_host(host_id)
            host_name = host['name']
        else:
            host = None
        changed = False

        if state == 'present' and not host and host_name:
            if self.module.params['new_name']:
                error_msg = "Operation on host failed as new_name is given " \
                            "for a host that doesnt exist."
                LOG.error(error_msg)
                self.module.fail_json(msg=error_msg)

            if initiator_state != "present-in-host":
                error_msg = "Incorrect initiator_state specified for Create" \
                            " host functionality"
                LOG.error(error_msg)
                self.module.fail_json(msg=error_msg)
            LOG.info('Creating host {0}'.format(host_name))
            changed = self.create_host(host_name)
            if changed:
                host_id = self.get_host_id_by_name(host_name)
        
        if host and os_type and os_type != host["os_type"]:
            error_msg = "os_type cannot be modified for an already existing host."
            LOG.error(error_msg)
            self.module.fail_json(msg=error_msg)

        if (state == 'present' and host and initiator_state ==
                'present-in-host' and initiators and len(initiators) > 0):
            LOG.info('Adding initiators to host {0}'.format(host_id))
            changed = (self.add_host_initiators(host, initiators=initiators) or
                       changed)

        if (state == 'present' and host and initiator_state == 'absent-in-host'
                and initiators and len(initiators) > 0):
            LOG.info('Removing initiators from host {0}'.format(host_id))
            changed = (self.remove_host_initiators(host, initiators=initiators)
                       or changed)

        if state == 'present' and host and new_name:
            if host_name != new_name:
                LOG.info('Renaming host {0} to {1}'.format(host_name, new_name))
                changed = self.rename_host(host, new_name)
                if changed:
                    self.module.params['host_name'] = new_name

        if state == 'absent' and host:
            LOG.info('Delete host {0} '.format(host['name']))
            changed = self.delete_host(host) or changed

        self._create_result_dict(changed)
        # Update the module's final state
        LOG.info('changed {0}'.format(changed))
        self.module.exit_json(**self.result)


def main():
    ''' Create PowerStore host object and perform action on it
        based on user input from playbook'''
    obj = PowerStoreHost()
    obj.perform_module_operation()


if __name__ == '__main__':
    main()
